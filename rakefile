# --------------------------------------------------------------------------- #
#
# Copyright (c) 2010 CubeSoft, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#  http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# --------------------------------------------------------------------------- #
require 'rake'
require 'rake/clean'

# --------------------------------------------------------------------------- #
# configuration
# --------------------------------------------------------------------------- #
PROJECT     = "pdfium"
PLATFORMS   = ["x64", "x86", "arm64"]
KINDS       = ["lite", "full"]

# --------------------------------------------------------------------------- #
# clean
# --------------------------------------------------------------------------- #
CLEAN.include("#{PROJECT}/out")

# --------------------------------------------------------------------------- #
# default
# --------------------------------------------------------------------------- #
desc "Clean, sync, build, and create NuGet packages."
task :default => [:clean, :sync, :build_all, :pack_all]

# --------------------------------------------------------------------------- #
# sync
# --------------------------------------------------------------------------- #
desc "Run glicent sync."
task :sync do
    git("submodule init")
    git("submodule update")
    patch { cd('..') { cmd("gclient sync -D --with_branch_heads") }}
end

# --------------------------------------------------------------------------- #
# pack
# --------------------------------------------------------------------------- #
desc "Create the specified kind of NuGet package."
task :pack, [:kind] do |_, e|
    e.with_defaults(:kind => KINDS[0])
    cmd("nuget pack nuspec/cube.native.#{PROJECT}.#{e.kind}.nuspec")
end

# --------------------------------------------------------------------------- #
# pack_all
# --------------------------------------------------------------------------- #
desc "Create all NuGet packages."
task :pack_all do
    KINDS.each { |e|
        Rake::Task[:pack].reenable
        Rake::Task[:pack].invoke(e)
    }
end

# --------------------------------------------------------------------------- #
# build
# --------------------------------------------------------------------------- #
desc "Build projects with the specified kind and platform."
task :build, [:kind, :platform] do |_, e|
    e.with_defaults(:kind => KINDS[0])
    e.with_defaults(:platform => PLATFORMS[0])

    src  = "args/#{e.kind}-#{e.platform}.gn"
    dest = "out/release-#{e.kind}-#{e.platform}"

    RakeFileUtils::mkdir_p("#{PROJECT}/#{dest}")
    RakeFileUtils::cp(src, "#{PROJECT}/#{dest}/args.gn")

    patch {
        cmd("gn gen #{dest}")
        cmd("ninja -C #{dest} #{PROJECT}")
    }
end

# --------------------------------------------------------------------------- #
# build_all
# --------------------------------------------------------------------------- #
desc "Build projects with pre-defined kinds and platforms."
task :build_all do
    KINDS.product(PLATFORMS).each { |set|
        Rake::Task[:build].reenable
        Rake::Task[:build].invoke(set[0], set[1])
    }
end

# --------------------------------------------------------------------------- #
# patch
# --------------------------------------------------------------------------- #
def patch(&block)
    cd(PROJECT) {
        begin
            sh("patch -p1 < ../#{PROJECT}.patch")
            block.call
        ensure
            git("checkout .")
            git("clean -fd")
        end
    }
end

# --------------------------------------------------------------------------- #
# cmd
# --------------------------------------------------------------------------- #
def cmd(args)
    sh("cmd.exe /c #{args}")
end

# --------------------------------------------------------------------------- #
# git
# --------------------------------------------------------------------------- #
def git(args)
    cmd("git.exe #{args}")
end
